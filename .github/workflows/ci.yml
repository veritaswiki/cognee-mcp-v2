name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format check with black
      run: uv run black --check --diff .
    
    - name: Import sorting check with isort
      run: uv run isort --check-only --diff .
    
    - name: Type check with mypy
      run: uv run mypy .
      continue-on-error: true  # Allow mypy errors for now
    
    - name: Test with pytest
      run: |
        uv run pytest --cov=core --cov=modules --cov=tools \
                      --cov-report=xml --cov-report=term-missing \
                      --junitxml=pytest.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Create virtual environment
      run: uv venv
    
    - name: Install dependencies
      run: uv pip install -e ".[dev]"
    
    - name: Run bandit security check
      run: uv run bandit -r core/ tools/ schemas/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  mcp-integration:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Create virtual environment
      run: uv venv
    
    - name: Install dependencies
      run: uv pip install -e ".[dev]"
    
    - name: Test MCP server initialization
      run: |
        timeout 10s bash -c 'echo "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocol_version\":\"2024-11-05\",\"capabilities\":{},\"client_info\":{\"name\":\"ci\",\"version\":\"1.0\"}}}" | uv run python main.py' || true
    
    - name: Test MCP tools list
      run: |
        timeout 10s bash -c 'echo "{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/list\",\"params\":{}}" | uv run python main.py' || true
